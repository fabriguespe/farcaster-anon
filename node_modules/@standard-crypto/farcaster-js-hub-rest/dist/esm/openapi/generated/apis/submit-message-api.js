/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. Some client libraries:   - [TypeScript](https://www.npmjs.com/package/@standard-crypto/farcaster-js-hub-rest)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBasicAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base.js';
/**
 * SubmitMessageApi - axios parameter creator
 * @export
 */
export const SubmitMessageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Submit a signed protobuf-serialized message to the Hub
         * @param {Buffer} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitMessage: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitMessage', 'body', body);
            const localVarPath = `/v1/submitMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication usernamePassword required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SubmitMessageApi - functional programming interface
 * @export
 */
export const SubmitMessageApiFp = function (configuration) {
    const localVarAxiosParamCreator = SubmitMessageApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Submit a signed protobuf-serialized message to the Hub
         * @param {Buffer} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitMessage(body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitMessage(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * SubmitMessageApi - factory interface
 * @export
 */
export const SubmitMessageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SubmitMessageApiFp(configuration);
    return {
        /**
         *
         * @summary Submit a signed protobuf-serialized message to the Hub
         * @param {SubmitMessageApiSubmitMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitMessage(requestParameters, options) {
            return localVarFp.submitMessage(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubmitMessageApi - object-oriented interface
 * @export
 * @class SubmitMessageApi
 * @extends {BaseAPI}
 */
export class SubmitMessageApi extends BaseAPI {
    /**
     *
     * @summary Submit a signed protobuf-serialized message to the Hub
     * @param {SubmitMessageApiSubmitMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmitMessageApi
     */
    submitMessage(requestParameters, options) {
        return SubmitMessageApiFp(this.configuration).submitMessage(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=submit-message-api.js.map