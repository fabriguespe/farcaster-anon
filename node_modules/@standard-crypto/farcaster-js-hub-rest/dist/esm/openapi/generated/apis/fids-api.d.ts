/**
 * Farcaster Hub REST API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. Some client libraries:   - [TypeScript](https://www.npmjs.com/package/@standard-crypto/farcaster-js-hub-rest)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base.js';
import { FidsResponse } from '../models/index.js';
/**
 * FIDsApi - axios parameter creator
 * @export
 */
export declare const FIDsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of all the FIDs
     * @param {number} [pageSize] Maximum number of messages to return in a single response
     * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
     * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFids: (pageSize?: number, reverse?: boolean, pageToken?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FIDsApi - functional programming interface
 * @export
 */
export declare const FIDsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of all the FIDs
     * @param {number} [pageSize] Maximum number of messages to return in a single response
     * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
     * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFids(pageSize?: number, reverse?: boolean, pageToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FidsResponse>>;
};
/**
 * FIDsApi - factory interface
 * @export
 */
export declare const FIDsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a list of all the FIDs
     * @param {FIDsApiListFidsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFids(requestParameters?: FIDsApiListFidsRequest, options?: AxiosRequestConfig): AxiosPromise<FidsResponse>;
};
/**
 * Request parameters for listFids operation in FIDsApi.
 * @export
 * @interface FIDsApiListFidsRequest
 */
export interface FIDsApiListFidsRequest {
    /**
     * Maximum number of messages to return in a single response
     * @type {number}
     * @memberof FIDsApiListFids
     */
    readonly pageSize?: number;
    /**
     * Reverse the sort order, returning latest messages first
     * @type {boolean}
     * @memberof FIDsApiListFids
     */
    readonly reverse?: boolean;
    /**
     * The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
     * @type {string}
     * @memberof FIDsApiListFids
     */
    readonly pageToken?: string;
}
/**
 * FIDsApi - object-oriented interface
 * @export
 * @class FIDsApi
 * @extends {BaseAPI}
 */
export declare class FIDsApi extends BaseAPI {
    /**
     *
     * @summary Get a list of all the FIDs
     * @param {FIDsApiListFidsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FIDsApi
     */
    listFids(requestParameters?: FIDsApiListFidsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FidsResponse, any>>;
}
