"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * Perform basic queries of Farcaster state via the REST API of a Farcaster hub. See the [Farcaster docs](https://www.thehubble.xyz/docs/httpapi/httpapi.html) for more details. Some client libraries:   - [TypeScript](https://www.npmjs.com/package/@standard-crypto/farcaster-js-hub-rest)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinksApi = exports.LinksApiFactory = exports.LinksApiFp = exports.LinksApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_js_1 = require("../common.js");
// @ts-ignore
const base_js_1 = require("../base.js");
/**
 * LinksApi - axios parameter creator
 * @export
 */
const LinksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get a link by its FID and target FID.
         * @param {number} fid The FID of the link\&#39;s originator
         * @param {number} targetFid The FID of the target of the link
         * @param {LinkType} linkType The type of link, as a string value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkById: async (fid, targetFid, linkType, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_js_1.assertParamExists)('getLinkById', 'fid', fid);
            // verify required parameter 'targetFid' is not null or undefined
            (0, common_js_1.assertParamExists)('getLinkById', 'targetFid', targetFid);
            // verify required parameter 'linkType' is not null or undefined
            (0, common_js_1.assertParamExists)('getLinkById', 'linkType', linkType);
            const localVarPath = `/v1/linkById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (targetFid !== undefined) {
                localVarQueryParameter['target_fid'] = targetFid;
            }
            if (linkType !== undefined) {
                localVarQueryParameter['link_type'] = linkType;
            }
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all links from a source FID
         * @param {number} fid The FID of the link\&#39;s originator
         * @param {LinkType} [linkType] The type of link, as a string value
         * @param {number} [pageSize] Maximum number of messages to return in a single response
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinksByFid: async (fid, linkType, pageSize, reverse, pageToken, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_js_1.assertParamExists)('listLinksByFid', 'fid', fid);
            const localVarPath = `/v1/linksByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (linkType !== undefined) {
                localVarQueryParameter['link_type'] = linkType;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all links to a target FID
         * @param {number} targetFid The FID of the target of the link
         * @param {LinkType} [linkType] The type of link, as a string value
         * @param {number} [pageSize] Maximum number of messages to return in a single response
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinksByTargetFid: async (targetFid, linkType, pageSize, reverse, pageToken, options = {}) => {
            // verify required parameter 'targetFid' is not null or undefined
            (0, common_js_1.assertParamExists)('listLinksByTargetFid', 'targetFid', targetFid);
            const localVarPath = `/v1/linksByTargetFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (targetFid !== undefined) {
                localVarQueryParameter['target_fid'] = targetFid;
            }
            if (linkType !== undefined) {
                localVarQueryParameter['link_type'] = linkType;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }
            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LinksApiAxiosParamCreator = LinksApiAxiosParamCreator;
/**
 * LinksApi - functional programming interface
 * @export
 */
const LinksApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LinksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get a link by its FID and target FID.
         * @param {number} fid The FID of the link\&#39;s originator
         * @param {number} targetFid The FID of the target of the link
         * @param {LinkType} linkType The type of link, as a string value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLinkById(fid, targetFid, linkType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLinkById(fid, targetFid, linkType, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get all links from a source FID
         * @param {number} fid The FID of the link\&#39;s originator
         * @param {LinkType} [linkType] The type of link, as a string value
         * @param {number} [pageSize] Maximum number of messages to return in a single response
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLinksByFid(fid, linkType, pageSize, reverse, pageToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLinksByFid(fid, linkType, pageSize, reverse, pageToken, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get all links to a target FID
         * @param {number} targetFid The FID of the target of the link
         * @param {LinkType} [linkType] The type of link, as a string value
         * @param {number} [pageSize] Maximum number of messages to return in a single response
         * @param {boolean} [reverse] Reverse the sort order, returning latest messages first
         * @param {string} [pageToken] The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLinksByTargetFid(targetFid, linkType, pageSize, reverse, pageToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLinksByTargetFid(targetFid, linkType, pageSize, reverse, pageToken, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
    };
};
exports.LinksApiFp = LinksApiFp;
/**
 * LinksApi - factory interface
 * @export
 */
const LinksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LinksApiFp)(configuration);
    return {
        /**
         *
         * @summary Get a link by its FID and target FID.
         * @param {LinksApiGetLinkByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLinkById(requestParameters, options) {
            return localVarFp.getLinkById(requestParameters.fid, requestParameters.targetFid, requestParameters.linkType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all links from a source FID
         * @param {LinksApiListLinksByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinksByFid(requestParameters, options) {
            return localVarFp.listLinksByFid(requestParameters.fid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all links to a target FID
         * @param {LinksApiListLinksByTargetFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLinksByTargetFid(requestParameters, options) {
            return localVarFp.listLinksByTargetFid(requestParameters.targetFid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LinksApiFactory = LinksApiFactory;
/**
 * LinksApi - object-oriented interface
 * @export
 * @class LinksApi
 * @extends {BaseAPI}
 */
class LinksApi extends base_js_1.BaseAPI {
    /**
     *
     * @summary Get a link by its FID and target FID.
     * @param {LinksApiGetLinkByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    getLinkById(requestParameters, options) {
        return (0, exports.LinksApiFp)(this.configuration).getLinkById(requestParameters.fid, requestParameters.targetFid, requestParameters.linkType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all links from a source FID
     * @param {LinksApiListLinksByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    listLinksByFid(requestParameters, options) {
        return (0, exports.LinksApiFp)(this.configuration).listLinksByFid(requestParameters.fid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all links to a target FID
     * @param {LinksApiListLinksByTargetFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinksApi
     */
    listLinksByTargetFid(requestParameters, options) {
        return (0, exports.LinksApiFp)(this.configuration).listLinksByTargetFid(requestParameters.targetFid, requestParameters.linkType, requestParameters.pageSize, requestParameters.reverse, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LinksApi = LinksApi;
//# sourceMappingURL=links-api.js.map