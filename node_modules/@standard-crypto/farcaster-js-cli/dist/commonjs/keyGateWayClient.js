"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeveloperSigner = void 0;
/* eslint-disable eslint-comments/disable-enable-pair */
/* eslint-disable no-console */
const viem_1 = require("viem");
const chains_1 = require("viem/chains");
const accounts_1 = require("viem/accounts");
const ed25519_1 = require("@noble/curves/ed25519");
const IdRegistryABI_js_1 = require("./abi/IdRegistryABI.js");
const KeyGatewayABI_js_1 = require("./abi/KeyGatewayABI.js");
const SignedKeyRequestMetadataABI_js_1 = require("./abi/SignedKeyRequestMetadataABI.js");
const CONTRACTS = {
    idRegistry: '0x00000000fcaf86937e41ba038b4fa40baa4b780a',
    keyGateway: '0x00000000fc56947c7e7183f8ca4b62398caadf0b',
    signedKeyRequestValidator: '0x00000000fc700472606ed4fa22623acf62c60553',
};
const IdContract = {
    abi: IdRegistryABI_js_1.IdRegistryABI,
    address: CONTRACTS.idRegistry,
    chain: chains_1.optimism,
};
const KeyGatewayContract = {
    abi: KeyGatewayABI_js_1.KeyGatewayABI,
    address: CONTRACTS.keyGateway,
    chain: chains_1.optimism,
};
const SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN = {
    name: 'Farcaster SignedKeyRequestValidator',
    version: '1',
    chainId: 10, // OP Mainnet
    verifyingContract: '0x00000000fc700472606ed4fa22623acf62c60553',
};
const SIGNED_KEY_REQUEST_TYPE = [
    { name: 'requestFid', type: 'uint256' },
    { name: 'key', type: 'bytes' },
    { name: 'deadline', type: 'uint256' },
];
async function createDeveloperSigner(mnemonic) {
    const account = (0, accounts_1.mnemonicToAccount)(mnemonic);
    const walletClient = (0, viem_1.createWalletClient)({
        account: account,
        chain: chains_1.optimism,
        transport: (0, viem_1.http)(),
    });
    const publicClient = (0, viem_1.createPublicClient)({
        chain: chains_1.optimism,
        transport: (0, viem_1.http)(),
    });
    const readIdContract = (0, viem_1.getContract)({ ...IdContract, publicClient });
    const fid = await readIdContract.read.idOf([account.address]);
    const privateKey = ed25519_1.ed25519.utils.randomPrivateKey();
    const publicKey = (0, viem_1.toHex)(ed25519_1.ed25519.getPublicKey(privateKey));
    const params = await getSignedMetadataParams(walletClient, account, Number(fid), account.address, publicKey);
    const { request: signerAddRequest } = await publicClient.simulateContract({
        ...KeyGatewayContract,
        functionName: 'add',
        args: [1, publicKey, 1, params], // keyType, publicKey, metadataType, metadata
        account: account,
    });
    const signerAddTxHash = await walletClient.writeContract(signerAddRequest);
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    console.log(`Transaction written to OP Mainnet. Check txn status at https://optimistic.etherscan.io/tx/${signerAddTxHash}`);
    await publicClient.waitForTransactionReceipt({ hash: signerAddTxHash });
    console.log('Transaction Confirmed! Your signer is ready to use.');
}
exports.createDeveloperSigner = createDeveloperSigner;
async function getSignedMetadataParams(walletClient, account, fid, address, signerPublicKey) {
    const deadline = Math.floor(Date.now() / 1000) + 60 * 60; // 1 hour from now
    // Sign a EIP-712 message using the account that holds the FID to authorize adding this signer to the key registry
    const signedMetadata = await walletClient.signTypedData({
        domain: SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN,
        types: {
            SignedKeyRequest: SIGNED_KEY_REQUEST_TYPE,
        },
        primaryType: 'SignedKeyRequest',
        message: {
            requestFid: BigInt(fid),
            key: signerPublicKey,
            deadline: BigInt(deadline),
        },
        account: account,
    });
    return (0, viem_1.encodeAbiParameters)(SignedKeyRequestMetadataABI_js_1.SignedKeyRequestMetadataABI.inputs, [
        {
            requestFid: BigInt(fid),
            requestSigner: address,
            signature: signedMetadata,
            deadline: BigInt(deadline),
        },
    ]);
}
//# sourceMappingURL=keyGateWayClient.js.map