"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CastApi = exports.CastApiFactory = exports.CastApiFp = exports.CastApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_js_1 = require("../common.js");
// @ts-ignore
const base_js_1 = require("../base.js");
/**
 * CastApi - axios parameter creator
 * @export
 */
const CastApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary Retrieve cast for a given hash or Warpcast URL
         * @param {CastParamType} type
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cast: async (type, identifier, options = {}) => {
            // verify required parameter 'type' is not null or undefined
            (0, common_js_1.assertParamExists)('cast', 'type', type);
            // verify required parameter 'identifier' is not null or undefined
            (0, common_js_1.assertParamExists)('cast', 'identifier', identifier);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve multiple casts using their respective hashes.
         * @summary Gets information about an array of casts
         * @param {string} casts Hashes of the cast to be retrieved (Comma separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casts: async (casts, options = {}) => {
            // verify required parameter 'casts' is not null or undefined
            (0, common_js_1.assertParamExists)('casts', 'casts', casts);
            const localVarPath = `/farcaster/casts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            if (casts !== undefined) {
                localVarQueryParameter['casts'] = casts;
            }
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} deleteCastReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCast: async (deleteCastReqBody, options = {}) => {
            // verify required parameter 'deleteCastReqBody' is not null or undefined
            (0, common_js_1.assertParamExists)('deleteCast', 'deleteCastReqBody', deleteCastReqBody);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_js_1.serializeDataIfNeeded)(deleteCastReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Posts a cast
         * @param {PostCastReqBody} postCastReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCast: async (postCastReqBody, options = {}) => {
            // verify required parameter 'postCastReqBody' is not null or undefined
            (0, common_js_1.assertParamExists)('postCast', 'postCastReqBody', postCastReqBody);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_js_1.serializeDataIfNeeded)(postCastReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CastApiAxiosParamCreator = CastApiAxiosParamCreator;
/**
 * CastApi - functional programming interface
 * @export
 */
const CastApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CastApiAxiosParamCreator)(configuration);
    return {
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary Retrieve cast for a given hash or Warpcast URL
         * @param {CastParamType} type
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cast(type, identifier, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cast(type, identifier, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve multiple casts using their respective hashes.
         * @summary Gets information about an array of casts
         * @param {string} casts Hashes of the cast to be retrieved (Comma separated)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async casts(casts, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.casts(casts, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} deleteCastReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCast(deleteCastReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCast(deleteCastReqBody, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Posts a cast
         * @param {PostCastReqBody} postCastReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCast(postCastReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCast(postCastReqBody, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
    };
};
exports.CastApiFp = CastApiFp;
/**
 * CastApi - factory interface
 * @export
 */
const CastApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CastApiFp)(configuration);
    return {
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary Retrieve cast for a given hash or Warpcast URL
         * @param {CastApiCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cast(requestParameters, options) {
            return localVarFp.cast(requestParameters.type, requestParameters.identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve multiple casts using their respective hashes.
         * @summary Gets information about an array of casts
         * @param {CastApiCastsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        casts(requestParameters, options) {
            return localVarFp.casts(requestParameters.casts, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCast(requestParameters, options) {
            return localVarFp.deleteCast(requestParameters.deleteCastReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Posts a cast
         * @param {CastApiPostCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCast(requestParameters, options) {
            return localVarFp.postCast(requestParameters.postCastReqBody, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CastApiFactory = CastApiFactory;
/**
 * CastApi - object-oriented interface
 * @export
 * @class CastApi
 * @extends {BaseAPI}
 */
class CastApi extends base_js_1.BaseAPI {
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary Retrieve cast for a given hash or Warpcast URL
     * @param {CastApiCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    cast(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).cast(requestParameters.type, requestParameters.identifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve multiple casts using their respective hashes.
     * @summary Gets information about an array of casts
     * @param {CastApiCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    casts(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).casts(requestParameters.casts, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    deleteCast(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).deleteCast(requestParameters.deleteCastReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Posts a cast
     * @param {CastApiPostCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     */
    postCast(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).postCast(requestParameters.postCastReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CastApi = CastApi;
//# sourceMappingURL=cast-api.js.map