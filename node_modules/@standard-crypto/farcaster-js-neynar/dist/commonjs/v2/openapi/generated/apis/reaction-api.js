"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactionApi = exports.ReactionApiFactory = exports.ReactionApiFp = exports.ReactionApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_js_1 = require("../common.js");
// @ts-ignore
const base_js_1 = require("../base.js");
/**
 * ReactionApi - axios parameter creator
 * @export
 */
const ReactionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
         * @summary Delete a reaction
         * @param {ReactionReqBody} reactionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReaction: async (reactionReqBody, options = {}) => {
            // verify required parameter 'reactionReqBody' is not null or undefined
            (0, common_js_1.assertParamExists)('deleteReaction', 'reactionReqBody', reactionReqBody);
            const localVarPath = `/farcaster/reaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_js_1.serializeDataIfNeeded)(reactionReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
         * @summary Posts a reaction
         * @param {ReactionReqBody} reactionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReaction: async (reactionReqBody, options = {}) => {
            // verify required parameter 'reactionReqBody' is not null or undefined
            (0, common_js_1.assertParamExists)('postReaction', 'reactionReqBody', reactionReqBody);
            const localVarPath = `/farcaster/reaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_js_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_js_1.setApiKeyToObject)(localVarHeaderParameter, "api_key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_js_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_js_1.serializeDataIfNeeded)(reactionReqBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_js_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ReactionApiAxiosParamCreator = ReactionApiAxiosParamCreator;
/**
 * ReactionApi - functional programming interface
 * @export
 */
const ReactionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReactionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
         * @summary Delete a reaction
         * @param {ReactionReqBody} reactionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReaction(reactionReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReaction(reactionReqBody, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
        /**
         * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
         * @summary Posts a reaction
         * @param {ReactionReqBody} reactionReqBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReaction(reactionReqBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReaction(reactionReqBody, options);
            return (0, common_js_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_js_1.BASE_PATH, configuration);
        },
    };
};
exports.ReactionApiFp = ReactionApiFp;
/**
 * ReactionApi - factory interface
 * @export
 */
const ReactionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReactionApiFp)(configuration);
    return {
        /**
         * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
         * @summary Delete a reaction
         * @param {ReactionApiDeleteReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReaction(requestParameters, options) {
            return localVarFp.deleteReaction(requestParameters.reactionReqBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
         * @summary Posts a reaction
         * @param {ReactionApiPostReactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReaction(requestParameters, options) {
            return localVarFp.postReaction(requestParameters.reactionReqBody, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReactionApiFactory = ReactionApiFactory;
/**
 * ReactionApi - object-oriented interface
 * @export
 * @class ReactionApi
 * @extends {BaseAPI}
 */
class ReactionApi extends base_js_1.BaseAPI {
    /**
     * Delete a reaction (like or recast) to a given cast \\ (In order to delete a reaction `signer_uuid` must be approved)
     * @summary Delete a reaction
     * @param {ReactionApiDeleteReactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    deleteReaction(requestParameters, options) {
        return (0, exports.ReactionApiFp)(this.configuration).deleteReaction(requestParameters.reactionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post a reaction (like or recast) to a given cast \\ (In order to post a reaction `signer_uuid` must be approved)
     * @summary Posts a reaction
     * @param {ReactionApiPostReactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReactionApi
     */
    postReaction(requestParameters, options) {
        return (0, exports.ReactionApiFp)(this.configuration).postReaction(requestParameters.reactionReqBody, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReactionApi = ReactionApi;
//# sourceMappingURL=reaction-api.js.map