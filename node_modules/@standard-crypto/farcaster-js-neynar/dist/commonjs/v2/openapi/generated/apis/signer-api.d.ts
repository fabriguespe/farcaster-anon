/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { RequestArgs, BaseAPI } from '../base.js';
import { RegisterSignerKeyReqBody } from '../models';
import { Signer } from '../models';
/**
 * SignerApi - axios parameter creator
 * @export
 */
export declare const SignerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While testing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey: (registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer: (signerUuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SignerApi - functional programming interface
 * @export
 */
export declare const SignerApiFp: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While testing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} registerSignerKeyReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey(registerSignerKeyReqBody: RegisterSignerKeyReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {string} signerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer(signerUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
};
/**
 * SignerApi - factory interface
 * @export
 */
export declare const SignerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While testing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSigner(options?: AxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: AxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {SignerApiSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signer(requestParameters: SignerApiSignerRequest, options?: AxiosRequestConfig): AxiosPromise<Signer>;
};
/**
 * Request parameters for registerSignedKey operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyRequest
 */
export interface SignerApiRegisterSignedKeyRequest {
    /**
     *
     * @type {RegisterSignerKeyReqBody}
     * @memberof SignerApiRegisterSignedKey
     */
    readonly registerSignerKeyReqBody: RegisterSignerKeyReqBody;
}
/**
 * Request parameters for signer operation in SignerApi.
 * @export
 * @interface SignerApiSignerRequest
 */
export interface SignerApiSignerRequest {
    /**
     *
     * @type {string}
     * @memberof SignerApiSigner
     */
    readonly signerUuid: string;
}
/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
export declare class SignerApi extends BaseAPI {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While testing please reuse the signer, it costs money to approve a signer.
     * @summary Creates a signer and returns the signer status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    createSigner(options?: AxiosRequestConfig): Promise<globalAxios.AxiosResponse<Signer, any>>;
    /**
     * Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: AxiosRequestConfig): Promise<globalAxios.AxiosResponse<Signer, any>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Fetches the status of a signer
     * @param {SignerApiSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     */
    signer(requestParameters: SignerApiSignerRequest, options?: AxiosRequestConfig): Promise<globalAxios.AxiosResponse<Signer, any>>;
}
