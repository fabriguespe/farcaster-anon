/**
 * v1 Farcaster
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { RequestArgs, BaseAPI } from '../base.js';
import { User200Response } from '../models';
import { VerificationResponse } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export declare const VerificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary Retrieve user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userByVerification: (address: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all known verifications of a user
     * @summary Retrieve verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifications: (fid: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VerificationApi - functional programming interface
 * @export
 */
export declare const VerificationApiFp: (configuration?: Configuration) => {
    /**
     * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary Retrieve user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userByVerification(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User200Response>>;
    /**
     * Get all known verifications of a user
     * @summary Retrieve verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifications(fid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponse>>;
};
/**
 * VerificationApi - factory interface
 * @export
 */
export declare const VerificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary Retrieve user for a given ethereum address
     * @param {VerificationApiUserByVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userByVerification(requestParameters: VerificationApiUserByVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<User200Response>;
    /**
     * Get all known verifications of a user
     * @summary Retrieve verifications for a given FID
     * @param {VerificationApiVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifications(requestParameters: VerificationApiVerificationsRequest, options?: AxiosRequestConfig): AxiosPromise<VerificationResponse>;
};
/**
 * Request parameters for userByVerification operation in VerificationApi.
 * @export
 * @interface VerificationApiUserByVerificationRequest
 */
export interface VerificationApiUserByVerificationRequest {
    /**
     *
     * @type {string}
     * @memberof VerificationApiUserByVerification
     */
    readonly address: string;
}
/**
 * Request parameters for verifications operation in VerificationApi.
 * @export
 * @interface VerificationApiVerificationsRequest
 */
export interface VerificationApiVerificationsRequest {
    /**
     * FID of the user
     * @type {number}
     * @memberof VerificationApiVerifications
     */
    readonly fid: number;
}
/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export declare class VerificationApi extends BaseAPI {
    /**
     * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary Retrieve user for a given ethereum address
     * @param {VerificationApiUserByVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    userByVerification(requestParameters: VerificationApiUserByVerificationRequest, options?: AxiosRequestConfig): Promise<globalAxios.AxiosResponse<User200Response, any>>;
    /**
     * Get all known verifications of a user
     * @summary Retrieve verifications for a given FID
     * @param {VerificationApiVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    verifications(requestParameters: VerificationApiVerificationsRequest, options?: AxiosRequestConfig): Promise<globalAxios.AxiosResponse<VerificationResponse, any>>;
}
