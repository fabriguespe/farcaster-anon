/* tslint:disable */
/* eslint-disable */
/**
 * v1 Farcaster
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base.js';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {number} fid fid of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custodyAddress: async (fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('custodyAddress', 'fid', fid);
            const localVarPath = `/farcaster/custody-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers: async (viewerFid, cursor, limit, options = {}) => {
            const localVarPath = `/farcaster/recent-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {number} fid fid of a user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user: async (fid, viewerFid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('user', 'fid', fid);
            const localVarPath = `/farcaster/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {string} username Username of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByUsername: async (username, viewerFid, options = {}) => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('userByUsername', 'username', username);
            const localVarPath = `/farcaster/user-by-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCastLikes: async (fid, viewerFid, limit, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('userCastLikes', 'fid', fid);
            const localVarPath = `/farcaster/user-cast-likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {number} fid fid of a user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custodyAddress(fid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.custodyAddress(fid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 100, max 1000)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentUsers(viewerFid, cursor, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentUsers(viewerFid, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {number} fid fid of a user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async user(fid, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(fid, viewerFid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {string} username Username of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userByUsername(username, viewerFid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userByUsername(username, viewerFid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to retrieve (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCastLikes(fid, viewerFid, limit, cursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCastLikes(fid, viewerFid, limit, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserApiFp(configuration);
    return {
        /**
         * Returns the custody address for a given FID
         * @summary Get the custody address for a given FID
         * @param {UserApiCustodyAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custodyAddress(requestParameters, options) {
            return localVarFp.custodyAddress(requestParameters.fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Get Recent Users
         * @param {UserApiRecentUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers(requestParameters = {}, options) {
            return localVarFp.recentUsers(requestParameters.viewerFid, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by FID
         * @param {UserApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        user(requestParameters, options) {
            return localVarFp.user(requestParameters.fid, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns metadata about a specific user
         * @summary Get User Information by username
         * @param {UserApiUserByUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByUsername(requestParameters, options) {
            return localVarFp.userByUsername(requestParameters.username, requestParameters.viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all the liked cast of a User
         * @summary Get User Cast Likes
         * @param {UserApiUserCastLikesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCastLikes(requestParameters, options) {
            return localVarFp.userCastLikes(requestParameters.fid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Returns the custody address for a given FID
     * @summary Get the custody address for a given FID
     * @param {UserApiCustodyAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    custodyAddress(requestParameters, options) {
        return UserApiFp(this.configuration).custodyAddress(requestParameters.fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of casts from the protocol in reverse chronological order based on timestamp
     * @summary Get Recent Users
     * @param {UserApiRecentUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    recentUsers(requestParameters = {}, options) {
        return UserApiFp(this.configuration).recentUsers(requestParameters.viewerFid, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by FID
     * @param {UserApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    user(requestParameters, options) {
        return UserApiFp(this.configuration).user(requestParameters.fid, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by username
     * @param {UserApiUserByUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userByUsername(requestParameters, options) {
        return UserApiFp(this.configuration).userByUsername(requestParameters.username, requestParameters.viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch all the liked cast of a User
     * @summary Get User Cast Likes
     * @param {UserApiUserCastLikesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userCastLikes(requestParameters, options) {
        return UserApiFp(this.configuration).userCastLikes(requestParameters.fid, requestParameters.viewerFid, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=user-api.js.map