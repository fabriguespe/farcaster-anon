/* tslint:disable */
/* eslint-disable */
/**
 * v1 Farcaster
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base.js';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary Retrieve user for a given ethereum address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByVerification: async (address, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userByVerification', 'address', address);
            const localVarPath = `/farcaster/user-by-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all known verifications of a user
         * @summary Retrieve verifications for a given FID
         * @param {number} fid FID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifications: async (fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('verifications', 'fid', fid);
            const localVarPath = `/farcaster/verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function (configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration);
    return {
        /**
         * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary Retrieve user for a given ethereum address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userByVerification(address, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userByVerification(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all known verifications of a user
         * @summary Retrieve verifications for a given FID
         * @param {number} fid FID of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifications(fid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifications(fid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VerificationApiFp(configuration);
    return {
        /**
         * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary Retrieve user for a given ethereum address
         * @param {VerificationApiUserByVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userByVerification(requestParameters, options) {
            return localVarFp.userByVerification(requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all known verifications of a user
         * @summary Retrieve verifications for a given FID
         * @param {VerificationApiVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifications(requestParameters, options) {
            return localVarFp.verifications(requestParameters.fid, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary Retrieve user for a given ethereum address
     * @param {VerificationApiUserByVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    userByVerification(requestParameters, options) {
        return VerificationApiFp(this.configuration).userByVerification(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all known verifications of a user
     * @summary Retrieve verifications for a given FID
     * @param {VerificationApiVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    verifications(requestParameters, options) {
        return VerificationApiFp(this.configuration).verifications(requestParameters.fid, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=verification-api.js.map