/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, toPathString, createRequestFunction } from '../common.js';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base.js';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {number} fid
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 25, max 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifications: async (fid, cursor, limit, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('notifications', 'fid', fid);
            const localVarPath = `/farcaster/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {number} fid
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [limit] Number of results to retrieve (default 25, max 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notifications(fid, cursor, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notifications(fid, cursor, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = NotificationsApiFp(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary Retrieve notifications for a given user
         * @param {NotificationsApiNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notifications(requestParameters, options) {
            return localVarFp.notifications(requestParameters.fid, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary Retrieve notifications for a given user
     * @param {NotificationsApiNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    notifications(requestParameters, options) {
        return NotificationsApiFp(this.configuration).notifications(requestParameters.fid, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=notifications-api.js.map