/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration.js';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base.js';
import { AddVerificationReqBody } from '../models';
import { BulkFollowResponse } from '../models';
import { FollowReqBody } from '../models';
import { OperationResponse } from '../models';
import { RemoveVerificationReqBody } from '../models';
import { UpdateUserReqBody } from '../models';
import { UserBulk200Response } from '../models';
import { UserResponse } from '../models';
import { UserSearchResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Removes verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete: (removeVerificationReqBody: RemoveVerificationReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost: (addVerificationReqBody: AddVerificationReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser: (followReqBody: FollowReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress: (custodyAddress: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser: (followReqBody: FollowReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (updateUserReqBody: UpdateUserReqBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetches information about multiple users based on FIDs
     * @param {string} fids
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk: (fids: string, viewerFid?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {number} viewerFid
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch: (viewerFid: number, q: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Removes verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {RemoveVerificationReqBody} removeVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete(removeVerificationReqBody: RemoveVerificationReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {AddVerificationReqBody} addVerificationReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost(addVerificationReqBody: AddVerificationReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser(followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkFollowResponse>>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {string} custodyAddress Custody Address associated with mnemonic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress(custodyAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {FollowReqBody} followReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser(followReqBody: FollowReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkFollowResponse>>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {UpdateUserReqBody} updateUserReqBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(updateUserReqBody: UpdateUserReqBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetches information about multiple users based on FIDs
     * @param {string} fids
     * @param {number} [viewerFid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk(fids: string, viewerFid?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBulk200Response>>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {number} viewerFid
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch(viewerFid: number, q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSearchResponse>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Removes verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {UserApiFarcasterUserVerificationDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationDelete(requestParameters: UserApiFarcasterUserVerificationDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {UserApiFarcasterUserVerificationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    farcasterUserVerificationPost(requestParameters: UserApiFarcasterUserVerificationPostRequest, options?: AxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {UserApiFollowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUser(requestParameters: UserApiFollowUserRequest, options?: AxiosRequestConfig): AxiosPromise<BulkFollowResponse>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {UserApiLookupUserByCustodyAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lookupUserByCustodyAddress(requestParameters: UserApiLookupUserByCustodyAddressRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponse>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {UserApiUnfollowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUser(requestParameters: UserApiUnfollowUserRequest, options?: AxiosRequestConfig): AxiosPromise<BulkFollowResponse>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: UserApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetches information about multiple users based on FIDs
     * @param {UserApiUserBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userBulk(requestParameters: UserApiUserBulkRequest, options?: AxiosRequestConfig): AxiosPromise<UserBulk200Response>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {UserApiUserSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userSearch(requestParameters: UserApiUserSearchRequest, options?: AxiosRequestConfig): AxiosPromise<UserSearchResponse>;
};
/**
 * Request parameters for farcasterUserVerificationDelete operation in UserApi.
 * @export
 * @interface UserApiFarcasterUserVerificationDeleteRequest
 */
export interface UserApiFarcasterUserVerificationDeleteRequest {
    /**
     *
     * @type {RemoveVerificationReqBody}
     * @memberof UserApiFarcasterUserVerificationDelete
     */
    readonly removeVerificationReqBody: RemoveVerificationReqBody;
}
/**
 * Request parameters for farcasterUserVerificationPost operation in UserApi.
 * @export
 * @interface UserApiFarcasterUserVerificationPostRequest
 */
export interface UserApiFarcasterUserVerificationPostRequest {
    /**
     *
     * @type {AddVerificationReqBody}
     * @memberof UserApiFarcasterUserVerificationPost
     */
    readonly addVerificationReqBody: AddVerificationReqBody;
}
/**
 * Request parameters for followUser operation in UserApi.
 * @export
 * @interface UserApiFollowUserRequest
 */
export interface UserApiFollowUserRequest {
    /**
     *
     * @type {FollowReqBody}
     * @memberof UserApiFollowUser
     */
    readonly followReqBody: FollowReqBody;
}
/**
 * Request parameters for lookupUserByCustodyAddress operation in UserApi.
 * @export
 * @interface UserApiLookupUserByCustodyAddressRequest
 */
export interface UserApiLookupUserByCustodyAddressRequest {
    /**
     * Custody Address associated with mnemonic
     * @type {string}
     * @memberof UserApiLookupUserByCustodyAddress
     */
    readonly custodyAddress: string;
}
/**
 * Request parameters for unfollowUser operation in UserApi.
 * @export
 * @interface UserApiUnfollowUserRequest
 */
export interface UserApiUnfollowUserRequest {
    /**
     *
     * @type {FollowReqBody}
     * @memberof UserApiUnfollowUser
     */
    readonly followReqBody: FollowReqBody;
}
/**
 * Request parameters for updateUser operation in UserApi.
 * @export
 * @interface UserApiUpdateUserRequest
 */
export interface UserApiUpdateUserRequest {
    /**
     *
     * @type {UpdateUserReqBody}
     * @memberof UserApiUpdateUser
     */
    readonly updateUserReqBody: UpdateUserReqBody;
}
/**
 * Request parameters for userBulk operation in UserApi.
 * @export
 * @interface UserApiUserBulkRequest
 */
export interface UserApiUserBulkRequest {
    /**
     *
     * @type {string}
     * @memberof UserApiUserBulk
     */
    readonly fids: string;
    /**
     *
     * @type {number}
     * @memberof UserApiUserBulk
     */
    readonly viewerFid?: number;
}
/**
 * Request parameters for userSearch operation in UserApi.
 * @export
 * @interface UserApiUserSearchRequest
 */
export interface UserApiUserSearchRequest {
    /**
     *
     * @type {number}
     * @memberof UserApiUserSearch
     */
    readonly viewerFid: number;
    /**
     *
     * @type {string}
     * @memberof UserApiUserSearch
     */
    readonly q: string;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Removes verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Removes verification for an eth address for the user
     * @param {UserApiFarcasterUserVerificationDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    farcasterUserVerificationDelete(requestParameters: UserApiFarcasterUserVerificationDeleteRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Adds verification for an eth address for the user \\ (In order to add verification `signer_uuid` must be approved)
     * @summary Adds verification for an eth address for the user
     * @param {UserApiFarcasterUserVerificationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    farcasterUserVerificationPost(requestParameters: UserApiFarcasterUserVerificationPostRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Follow a user \\ (In order to follow a user `signer_uuid` must be approved)
     * @summary Follow a user
     * @param {UserApiFollowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    followUser(requestParameters: UserApiFollowUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkFollowResponse, any>>;
    /**
     * Lookup a user by custody-address
     * @summary Lookup a user by custody-address
     * @param {UserApiLookupUserByCustodyAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    lookupUserByCustodyAddress(requestParameters: UserApiLookupUserByCustodyAddressRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponse, any>>;
    /**
     * Unfollow a user \\ (In order to unfollow a user `signer_uuid` must be approved)
     * @summary Unfollow a user
     * @param {UserApiUnfollowUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    unfollowUser(requestParameters: UserApiUnfollowUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkFollowResponse, any>>;
    /**
     * Update user profile \\ (In order to update user\'s profile `signer_uuid` must be approved)
     * @summary Update user profile
     * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUser(requestParameters: UserApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Fetches information about multiple users based on FIDs
     * @summary Fetches information about multiple users based on FIDs
     * @param {UserApiUserBulkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userBulk(requestParameters: UserApiUserBulkRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserBulk200Response, any>>;
    /**
     * Search for Usernames
     * @summary Search for Usernames
     * @param {UserApiUserSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userSearch(requestParameters: UserApiUserSearchRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSearchResponse, any>>;
}
